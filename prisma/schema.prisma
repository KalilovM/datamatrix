generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  username    String       @unique
  password    String
  role        Role?
  company     Company?     @relation(fields: [companyId], references: [id], onDelete: SetNull)
  companyId   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
}

enum Role {
  ADMIN
  COMPANY_ADMIN
  COMPANY_USER
}

enum Entity {
  COMPANY
  USER
  NOMENCLATURE
  AGGREGATION
  DISAGGREGATION
  AGGREGATED_ARCHIVE
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

model Permission {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  entity    Entity
  action    Action
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id               String             @id @default(uuid())
  name             String
  token            String             @unique @default(uuid())
  subscriptionEnd  DateTime
  isActive         Boolean            @default(true)
  users            User[]
  nomenclatures    Nomenclature[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  counteragents    Counteragent[] // Renamed from "Counteragent"
  orders           Order[] // Renamed from "Orders"
  printingTemplate PrintingTemplate[]
}

model Nomenclature {
  id                   String                @id @default(uuid())
  name                 String
  modelArticle         String?
  color                String?
  size                 String?
  configurations       Configuration[]
  codePacks            CodePack[]
  company              Company               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId            String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  generatedCodePacks   GeneratedCodePack[]
  generatedCodePallets GeneratedCodePallet[]
}

model Code {
  id                  String             @id @default(uuid())
  value               String             @unique
  formattedValue      String
  codePack            CodePack           @relation(fields: [codePackId], references: [id], onDelete: Cascade)
  codePackId          String
  used                Boolean            @default(false)
  createdAt           DateTime           @default(now())
  generatedCodePack   GeneratedCodePack? @relation(fields: [generatedCodePackId], references: [id], onDelete: SetNull)
  generatedCodePackId String?
}

model CodePack {
  id             String       @id @default(uuid())
  name           String       @unique
  content        String
  nomenclature   Nomenclature @relation(fields: [nomenclatureId], references: [id], onDelete: Cascade)
  nomenclatureId String
  codes          Code[]
  used           Boolean      @default(false)
  createdAt      DateTime     @default(now())
}

model Configuration {
  id                   String                @id @default(uuid())
  basePiece            Int                   @default(1)
  pieceInPack          Int
  packInPallet         Int
  nomenclature         Nomenclature          @relation(fields: [nomenclatureId], references: [id], onDelete: Cascade)
  nomenclatureId       String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  generatedCodePacks   GeneratedCodePack[]
  generatedCodePallets GeneratedCodePallet[]
}

model GeneratedCodePack {
  id                    String               @id @default(uuid())
  value                 String               @unique
  codes                 Code[]
  nomenclature          Nomenclature         @relation(fields: [nomenclatureId], references: [id], onDelete: Cascade)
  nomenclatureId        String
  configuration         Configuration        @relation(fields: [configurationId], references: [id], onDelete: Cascade)
  configurationId       String
  createdAt             DateTime             @default(now())
  generatedCodePallet   GeneratedCodePallet? @relation(fields: [generatedCodePalletId], references: [id], onDelete: Cascade)
  generatedCodePalletId String?
  order                 Order?               @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId               String?
}

model GeneratedCodePallet {
  id                 String              @id @default(uuid())
  value              String              @unique
  generatedCodePacks GeneratedCodePack[]
  nomenclature       Nomenclature        @relation(fields: [nomenclatureId], references: [id], onDelete: Cascade)
  nomenclatureId     String
  configuration      Configuration       @relation(fields: [configurationId], references: [id], onDelete: Cascade)
  configurationId    String
  createdAt          DateTime            @default(now())
  order              Order?              @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId            String?
}

model ServiceInfo {
  id           String   @id @default(uuid())
  contactEmail String
  contactPhone String
  updatedAt    DateTime @updatedAt
}

model BankDetails {
  id                String   @id @default(uuid())
  bankName          String
  bankAccountNumber String
  bic               String // Renamed from "BIC"
  currency          String
  updatedAt         DateTime @updatedAt
}

model Counteragent {
  id        String   @id @default(uuid())
  name      String
  inn       String?
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Order {
  id                   String                @id
  company              Company               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId            String
  counteragent         Counteragent          @relation(fields: [counteragentId], references: [id], onDelete: Cascade)
  counteragentId       String
  generatedCodePallets GeneratedCodePallet[]
  generatedCodePacks   GeneratedCodePack[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

enum QrPosition {
  LEFT
  RIGHT
  CENTER
}

enum TemplateFieldType {
  NAME // "Имя"
  MODEL_ARTICLE // "Модель"
  COLOR // "Цвет"
  SIZE // "Размер"
}

enum PrintingTemplateType {
  NOMENCLATURE
  AGGREGATION
}

model PrintingTemplate {
  id         String                  @id @default(uuid())
  type       PrintingTemplateType
  name       String
  width      Int
  height     Int
  qrPosition QrPosition
  fields     PrintingTemplateField[]
  company    Company                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String
  isDefault  Boolean                 @default(false)
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
}

model PrintingTemplateField {
  id         String            @id @default(uuid())
  order      Int // порядок отображения поля
  fieldType  TemplateFieldType // одно из: NAME, MODEL_ARTICLE, COLOR, SIZE
  isBold     Boolean           @default(false)
  fontSize   Int               @default(12)
  template   PrintingTemplate  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}
